import { BigNumberish } from "@ethersproject/bignumber";
export declare const SISMO_CONNECT_VERSION = "sismo-connect-v1";
export type SismoConnectRequest = {
    appId: string;
    namespace?: string;
    auths?: AuthRequest[];
    claims?: ClaimRequest[];
    signature?: SignatureRequest;
    devConfig?: DevConfig;
    callbackPath?: string;
    version: string;
};
export type AuthRequest = {
    authType: AuthType;
    isAnon?: boolean;
    userId?: string;
    isOptional?: boolean;
    isSelectableByUser?: boolean;
    extraData?: any;
};
export type ClaimRequest = {
    claimType?: ClaimType;
    groupId?: string;
    groupTimestamp?: number | "latest";
    value?: number;
    isOptional?: boolean;
    isSelectableByUser?: boolean;
    extraData?: any;
};
export type SignatureRequest = {
    message: string;
    isSelectableByUser?: boolean;
    extraData?: any;
};
export type DevConfig = {
    enabled?: boolean;
    displayRawResponse?: boolean;
    devGroups?: DevGroup[];
};
export type DevGroup = {
    groupId: string;
    groupTimestamp?: number | "latest";
    data: DevAddresses;
};
export type DevAddresses = string[] | Record<string, Number | BigNumberish>;
export declare enum ProvingScheme {
    HYDRA_S2 = "hydra-s2.1"
}
export declare enum ClaimType {
    GTE = 0,
    GT = 1,
    EQ = 2,
    LT = 3,
    LTE = 4
}
export declare enum AuthType {
    VAULT = 0,
    GITHUB = 1,
    TWITTER = 2,
    EVM_ACCOUNT = 3
}
export type SismoConnectResponse = Pick<SismoConnectRequest, "appId" | "namespace" | "version"> & {
    signedMessage?: string;
    proofs: SismoConnectProof[];
};
export type SismoConnectProof = {
    auths?: Auth[];
    claims?: Claim[];
    provingScheme: string;
    proofData: string;
    extraData: any;
};
export type Auth = {
    authType: AuthType;
    isAnon?: boolean;
    isSelectableByUser?: boolean;
    userId?: string;
    extraData?: any;
};
export type Claim = {
    claimType?: ClaimType;
    groupId?: string;
    groupTimestamp?: number | "latest";
    isSelectableByUser?: boolean;
    value?: number;
    extraData?: any;
};
export type VerifiedClaim = Claim & {
    proofId: string;
    proofData: string;
};
export type VerifiedAuth = Auth & {
    proofData: string;
};
export declare class SismoConnectVerifiedResult {
    auths: VerifiedAuth[];
    claims: VerifiedClaim[];
    signedMessage: string | undefined;
    response: SismoConnectResponse;
    constructor({ response, claims, auths, }: {
        response: SismoConnectResponse;
        claims: VerifiedClaim[];
        auths: VerifiedAuth[];
    });
    getUserId(authType: AuthType): string | undefined;
    getUserIds(authType: AuthType): string[];
    getSignedMessage(): string | undefined;
}
export declare const resolveSismoIdentifier: (sismoIdentifier: string, authType: AuthType) => string;
export declare const toSismoIdentifier: (identifier: string, authType: AuthType) => string;
export declare class RequestBuilder {
    static buildAuths(auths: AuthRequest[] | AuthRequest): AuthRequest[];
    static buildClaims(claims: ClaimRequest[] | ClaimRequest): ClaimRequest[];
    static buildSignature(signature: SignatureRequest): SignatureRequest;
}
